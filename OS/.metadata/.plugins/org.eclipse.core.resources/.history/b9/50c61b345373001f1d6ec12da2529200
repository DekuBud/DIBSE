#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <fcntl.h>

// Check if file is a regular file
int is_regular_file(const char *path) {
    struct stat path_stat;
    stat(path, &path_stat);
    return S_ISREG(path_stat.st_mode);
}

// Checking if the first two characters are '#!'
int is_script(const char *path) {
    char buffer[2];
    int fd = open(path, O_RDONLY);
    if (fd < 0) {
        perror("open");
        return 0;
    }
    if (read(fd, buffer, 2) != 2) {
        close(fd);
        return 0;
    }

    close(fd);
    return (buffer[0] == '#' && buffer[1] == '!');
}

int main() {
    char input[1024];
    char *args[64];

    while (1) {
        printf("> ");
        fflush(stdout);

        //read input
        if (fgets(input, sizeof(input), stdin) == NULL) {
            perror("fgets");
            continue;
        }
        input[strcspn(input, "\n")] = 0;  // Remove newline

        if (strcmp(input, "exit") == 0) {
            break;
        }

        //parse
        int i = 0;
        char *token = strtok(input, " ");
        while (token != NULL) {
            args[i++] = token;
            token = strtok(NULL, " ");
        }
        args[i] = NULL;

        if (args[0] == NULL) {
            continue;
        }

        //check if file is a regular file not a directory
        if (!is_regular_file(args[0])) {
            fprintf(stderr, "Error: %s is not a regular file.\n", args[0]);
            continue;
        }

        //check if executable permission is given
        if (access(args[0], X_OK) == -1) {
            perror("execv");
            continue;
        }

        //Check file is a script
        if (is_script(args[0])) {
            printf("Detected script, executing...\n");
        }

        // Fork and execute the command
        pid_t pid = fork();
        if (pid == 0) { // Child process
            execv(args[0], args); // Execute the program or script
            perror("execv");
            exit(EXIT_FAILURE);
        } else if (pid > 0) { // Parent process
            waitpid(pid, NULL, 0); // Wait for the child process to finish
        } else {
            perror("fork");
        }
    }

    return 0;
}
